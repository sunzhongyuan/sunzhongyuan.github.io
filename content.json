{"meta":{"title":"sunzhongyuan","subtitle":"O ever youthful,O ever weeping.","description":"O ever youthful,O ever weeping.","author":"zyzy","url":"http://sunzhongyuan.net"},"pages":[{"title":"tags","date":"2018-06-24T15:55:39.000Z","updated":"2018-08-13T12:43:55.424Z","comments":false,"path":"tags/index.html","permalink":"http://sunzhongyuan.net/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-06-24T13:21:31.000Z","updated":"2018-08-13T12:44:07.531Z","comments":false,"path":"categories/index.html","permalink":"http://sunzhongyuan.net/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"python必备-virtualenv和virtualenvwrapper总结","slug":"Virtualenv","date":"2018-08-18T05:57:16.000Z","updated":"2018-08-20T15:38:37.401Z","comments":true,"path":"2018/08/18/Virtualenv/","link":"","permalink":"http://sunzhongyuan.net/2018/08/18/Virtualenv/","excerpt":"Virtualenv python项目与Java项目不同，Java的每一个项目都会将需要的库重新引用到自己的项目文件夹中； 而在同一开发环境中，python的所有项目都共用一个开发库，将多个项目的包混在一起，这样不利于管理，还会造成包冲突； 所以我们需要用到Virtualenv，它用于创建独立的python开发环境； 可以保证每一个项目都有独立的开发环境，包括不同的python版本。 virtualenvwrapper 它是基于virtualenv之上的管理工具，用来统一管理这些独立的开发环境（虚拟环境）。 快速上手0.安装Virtualenv1pip install virtualenv","text":"Virtualenv python项目与Java项目不同，Java的每一个项目都会将需要的库重新引用到自己的项目文件夹中； 而在同一开发环境中，python的所有项目都共用一个开发库，将多个项目的包混在一起，这样不利于管理，还会造成包冲突； 所以我们需要用到Virtualenv，它用于创建独立的python开发环境； 可以保证每一个项目都有独立的开发环境，包括不同的python版本。 virtualenvwrapper 它是基于virtualenv之上的管理工具，用来统一管理这些独立的开发环境（虚拟环境）。 快速上手0.安装Virtualenv1pip install virtualenv 1.安装virtualenvwrapper注意请先切换到用户目录，并退出虚拟环境后安装，否则会安装到虚拟环境；1pip install virtualenvwrapper Windows执行这个，Windows版官方文档1pip install virtualenvwrapper-win 2.初始化virtualenvwrapper1source /usr/local/bin/virtualenvwrapper.sh 初始化执行一次即可。 还可以将该命令添加到~/.bashrc或~/.profie或~/.bash_profile等shell启动文件中，以便登陆shell后可直接使用virtualenvwrapper提供的命令。 3.自定义WORKON_HOME virtualenvwrapper默认将所有的虚拟环境放在~/.virtualenvs目录下管理。 可以修改环境变量WORKON_HOME来指定虚拟环境的保存目录。 将以下命令添加到~/.bashrc或~/.profie或~/.bash_profile等shell启动文件中 12export WORKON_HOME=$HOME/envssource /usr/local/bin/virtualenvwrapper.sh 然后source一下让环境变量生效 1source ~/.bash_profile 4.创建虚拟环境1234mkvirtualenv [-a project_path] [-i package] [-r requirements_file] [virtualenv options] ENVNAME 直接执行mkvirtualenv可查看命令选项 mkvirtualenv是virtualenvwrapper创建虚拟环境的命令 virtualenv是Virtualenv创建虚拟环境的命令 mkvirtualenv继承了virtualenv命令的所有选项 virtualenv命令选项说明文档https://virtualenv.pypa.io/en/stable/reference/#virtualenv-command 123456789101112mac:~ zyzy$ mkvirtualenv -p python3 --no-site-packages testenv3.6Running virtualenv with interpreter /usr/local/bin/python3Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6'New python executable in /Users/zyzy/workspaces/testenv3.6/bin/python3Also creating executable in /Users/zyzy/workspaces/testenv3.6/bin/pythonInstalling setuptools, pip, wheel...done.virtualenvwrapper.user_scripts creating /Users/zyzy/workspaces/testenv3.6/bin/predeactivatevirtualenvwrapper.user_scripts creating /Users/zyzy/workspaces/testenv3.6/bin/postdeactivatevirtualenvwrapper.user_scripts creating /Users/zyzy/workspaces/testenv3.6/bin/preactivatevirtualenvwrapper.user_scripts creating /Users/zyzy/workspaces/testenv3.6/bin/postactivatevirtualenvwrapper.user_scripts creating /Users/zyzy/workspaces/testenv3.6/bin/get_env_details(testenv3.6) mac:~ zyzy$ 注意命令行多了(testenv3.6)前缀，说明虚拟环境创建成功，并且已经切换到了虚拟环境 在这个环境里可以用pip安装这个项目需要的包了，不会影响到其他项目 5.退出虚拟环境1deactivate 6.查看有哪些虚拟环境1workon 7.进入虚拟环境1workon testenv3.6 8.删除虚拟环境1rmvirtualenv testenv3.6 也可以直接删除testenv3.6目录 9.其他命令 showvirtualenv [env] 显示指定环境的详情。 cpvirtualenv [source] [dest] 复制一份虚拟环境。 add2virtualenv [dir] [dir] 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。 PS.生成requirements.txt python项目必须包含一个requirements.txt文件，用于记录所有依赖包及其精确的版本号，以便新环境部署。 生成requirements.txt很简单， 首先切换到虚拟环境， 用pip list可以查看当前虚拟环境安装的包，但是这里有三个默认包我们不需要记录； 所以我们用pip freeze命令查看，这个命令不显示默认包，直接将这个命令的输出结果重定向到requirements.txt文件即可 12pip freeze &gt; requirements.txt # 生成requirements.txtpip install -r requirements.txt # 从requirements.txt安装依赖 如何部署没有requirements.txt的项目 可以安装第三方工具pipreqs生成requirements.txt； 这个工具通过扫描源码生成依赖包，所以要切换到项目目录执行， 可能有些不全，需要自己手动调整。 12pip install pipreqs # 安装pipreqspipreqs ./ # 生成requirements.txt","categories":[{"name":"python","slug":"python","permalink":"http://sunzhongyuan.net/categories/python/"},{"name":"Virtualenv","slug":"python/Virtualenv","permalink":"http://sunzhongyuan.net/categories/python/Virtualenv/"}],"tags":[{"name":"Virtualenv","slug":"Virtualenv","permalink":"http://sunzhongyuan.net/tags/Virtualenv/"}]},{"title":"个人博客 GitHub Pages + Hexo","slug":"hexo","date":"2018-08-11T17:30:35.000Z","updated":"2018-08-13T14:06:48.351Z","comments":true,"path":"2018/08/12/hexo/","link":"","permalink":"http://sunzhongyuan.net/2018/08/12/hexo/","excerpt":"0.用hexo在本地创建个人博客创建方法参照：hexo中文官方文档 1.在GitHub上创建一个项目GitHub Pages文档，可以了解一下，这里只用了第一步，创建一个项目。","text":"0.用hexo在本地创建个人博客创建方法参照：hexo中文官方文档 1.在GitHub上创建一个项目GitHub Pages文档，可以了解一下，这里只用了第一步，创建一个项目。 2.将本地博客上传到GitHub上 将本地git与GitHub绑定（通过SSH） 安装插件npm install hexo-deployer-git --save 编辑Hexo的_config.yml文件 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:sunzhongyuan/sunzhongyuan.github.io.git branch: master 执行hexo d -g将生成html文件上传到GitHub 地址栏输入sunzhongyuan.github.io即可访问个人博客 3.绑定个人域名 设置项目sunzhongyuan.github.io 设置个人域名DNS解析 PS.每次执行hexo d -g上传代码后都要重新设置个人域名问题 在hexo目录下的source文件中加入一个文件名为CNAME, 里面写你的域名，然后提交, 以后就不会出现这个问题了。 图片链接问题 首先修改_config.yml中post_asset_folder: true 安装插件npm install https://github.com/CodeFalling/hexo-asset-image --save 然后每次新建文章时会多一个和文章名字一样的文件夹，图片可以放在这里 引用图片时可以写![](文件夹/logo.png) 生成html时会自动补充为图片的绝对路径 如何在首页显示文章摘要问题 修改主题的_config.yml文件 12345# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: #自动摘要 enable: true length: 150 将值修改为true后首页将展示自动摘要，但是没有格式可言，很丑; 所以这里我们还要手动设置摘要范围 在文章中添加&lt;!-- more --&gt;，表示文章到此为止为摘要部分显示在主页。 阅读次数和评论功能 当NexT主题版本没有升级到V6时，同时开启leancloud_visitors阅读次数和valine评论功能会引起冲突，两种功能时好时坏，解决方法如下： 参照在 NexT 中使用 Valine 评论系统，感谢作者reuixiy！","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://sunzhongyuan.net/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sunzhongyuan.net/tags/Hexo/"}]}]}